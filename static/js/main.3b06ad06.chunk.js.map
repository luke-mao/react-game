{"version":3,"sources":["components/FooterBar.js","components/MainBody.js","images/logo.png","components/Sidebar.js","utils/utils.js","pages/DashBoard.js","components/DialogWindow.js","pages/Snek.js","pages/Tictac.js","pages/Tower.js","App.js","index.js"],"names":["styles","theme","position","height","bottom","right","backgroundColor","breakpoints","down","width","only","up","FooterBar","useTheme","Box","sx","top","left","MainBody","children","sidebar","display","flexDirection","alignItems","logo","marginTop","marginBottom","xs","sm","md","lg","xl","stackLinks","mt","displaySmall","displayBig","TextBigScreen","text","Typography","variant","TextSmallScreen","Sidebar","Avatar","src","Logo","alt","Stack","direction","justifyContent","spacing","Link","to","component","RouterLink","resetNumGamesLeft","localStorage","setItem","decreaseNumGamesLeft","idx","isNumGamesLeftValid","key","getItem","numGamesLeft","parseInt","storedValue","flag","match","record","keys","gameRecords","map","countGamesNotFinish","allGameRecordsValid","i","length","box","line1","color","fontFamily","mx","mb","textAlign","box2","flexWrap","line2","button","my","DashBoard","useState","setNumGamesLeft","useEffect","alert","Button","size","onClick","border","transform","DialogWindow","isOpen","buttonText","buttonOnClick","titleBox","boardWrapper","cell","messageText","fontSize","CELL_NUMBER","INITIAL_SNAKE","rowIdx","colIdx","Snek","headDirection","setHeadDirection","snakeCells","setSnakeCells","foodLocation","setFoodLocation","board","setBoard","gameStatus","setGameStatus","isDialogOpen","setIsDialogOpen","timer","setTimer","snakeAndFoodStyle","result","found","initialBoard","Array","fill","getInitialBoard","getRandomFoodLocation","timerInterval","window","setInterval","addEventListener","changeHeadDirection","clearInterval","removeEventListener","snakeCellsCopy","tailCell","pop","newHeadCell","newSnakeCells","push","checkGameStatus","move","Math","floor","random","e","thisSnakeCells","headCell","collide","row","m","p","cellBorderStyle","borders","value","borderRight","borderBottom","cellBackgroundColor","isPlayer1","content","Tictac","setIsPlayer1","winner","setWinner","player1Moves","setPlayer1Moves","player2Moves","setPlayer2Moves","isComplete","thisBoard","isAllFilled","isWin","checkRow","checkColumn","checkDiagonal1","checkDiagonal2","navigate","useNavigate","Grid","container","item","newBoard","play","replace","alignContent","horizontalLine","verticalLine","block","extraContent","colors","widths","numBlocks","setNumBlocks","blockFrom","setBlockFrom","totalMoves","setTotalMoves","blockBottomPosition","numberBlocks","blocks","inputNumBlocks","userInput","prompt","trim","blockIdx","blockTo","check1","check2","check3","parseFloat","thisBlock","shift","idx2","App","path","element","createTheme","values","responsiveFontSizes","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.3b06ad06.chunk.js","sourcesContent":["import { Box, useTheme } from '@mui/system'\r\nimport React from 'react'\r\n\r\nconst styles = (theme) => ({\r\n  position: 'fixed',\r\n  height: '50px',\r\n  bottom: '0',\r\n  right: '0',\r\n  backgroundColor: '#999',\r\n\r\n  // span the full width, but consider the sidebar width.\r\n  // sidebar has 30px, 60px, and 100px\r\n  [theme.breakpoints.down('md')]: {\r\n    width: 'calc(100% - 30px)',\r\n  },\r\n  [theme.breakpoints.only('md')]: {\r\n    width: 'calc(100% - 60px)',\r\n  },\r\n  [theme.breakpoints.up('lg')]: {\r\n    width: 'calc(100% - 100px)',\r\n  },\r\n});\r\n\r\nexport default function FooterBar() {\r\n  const theme = useTheme();\r\n  \r\n  // the box has no content\r\n  return (\r\n    <Box\r\n      sx={styles(theme)}\r\n    />\r\n  )\r\n}\r\n","import { useTheme } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react';\r\n\r\nconst styles = (theme) => ({\r\n  position: 'fixed',\r\n  top: '0',\r\n\r\n  // height is 100% minus the footer bar height at 50px.\r\n  height: 'calc(100% - 50px)',\r\n\r\n  // width: the sidebar has 30px, 60px and 100px.\r\n  [theme.breakpoints.down('md')]: {\r\n    left: '30px',\r\n    width: 'calc(100% - 30px)',\r\n  },\r\n  [theme.breakpoints.only('md')]: {\r\n    left: '60px',\r\n    width: 'calc(100% - 60px)',\r\n  },\r\n  [theme.breakpoints.up('lg')]: {\r\n    left: '100px',\r\n    width: 'calc(100% - 100px)',\r\n  },\r\n\r\n  // add color to check the position\r\n  // backgroundColor: '#666',\r\n});\r\n\r\nexport default function MainBody({ children }) {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={styles(theme)}\r\n    >\r\n      {children}\r\n    </Box>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.430d4ecb.png\";","import React from 'react'\r\nimport { Box } from '@mui/system';\r\nimport Logo from '../images/logo.png';\r\nimport { Avatar, Link, Stack, Typography } from '@mui/material';\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nconst styles = (theme) => ({\r\n  sidebar: {\r\n    position: 'fixed',\r\n    backgroundColor: '#eee', \r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    width: '100px',\r\n\r\n    // the width changes between 30px, 60px, 100px\r\n    [theme.breakpoints.down('md')]: {\r\n      width: '30px',\r\n    },\r\n    [theme.breakpoints.only('md')]: {\r\n      width: '60px',\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      width: '100px',\r\n    },\r\n  },\r\n  logo: {\r\n    marginTop: '15px',\r\n    marginBottom: '15px',\r\n    height: '50px',\r\n    width: '50px',\r\n\r\n    // logo disappears for under 800px\r\n    display: {\r\n      xs: 'none',\r\n      sm: 'none',\r\n      md: 'block',\r\n      lg: 'block',\r\n      xl: 'block',\r\n    },\r\n  },\r\n  stackLinks: {\r\n    mt: 5,\r\n  },\r\n  // sepaaration of 1400px, the textcontent changes\r\n  displaySmall: {\r\n    // below 800px\r\n    display: {\r\n      xs: 'block',\r\n      sm: 'block',\r\n      md: 'block',\r\n      lg: 'none',\r\n      xl: 'none'\r\n    }\r\n  },\r\n  displayBig: {\r\n    // more than 1400px\r\n    display: {\r\n      xs: 'none',\r\n      sm: 'none',\r\n      md: 'none',\r\n      lg: 'block',\r\n      xl: 'block',\r\n    }\r\n  }\r\n});\r\n\r\n// use typography, display when big scree or small screen\r\nfunction TextBigScreen ({ text }) {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Typography\r\n      variant='h6'\r\n      sx={styles(theme).displayBig}\r\n    >\r\n      {text}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nfunction TextSmallScreen ({ text }) {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Typography\r\n      variant='h6'\r\n      sx={styles(theme).displaySmall}\r\n    >\r\n      {text}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default function Sidebar() {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={styles(theme).sidebar}\r\n    >\r\n      <Avatar\r\n        variant='square'\r\n        sx={styles(theme).logo}\r\n        src={Logo}\r\n        alt='logo'\r\n      />\r\n      <Stack\r\n        sx={styles(theme).stackLinks}\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={9}\r\n      >\r\n        {/* each link has three display mode */}\r\n        <Link \r\n          to='/home'\r\n          component={RouterLink}\r\n        >\r\n          <TextSmallScreen text='H' />\r\n          <TextBigScreen text='Home'/>\r\n        </Link>\r\n        <Link \r\n          to='/tictactoe'\r\n          component={RouterLink}\r\n        >\r\n          <TextSmallScreen text='Ti' />\r\n          <TextBigScreen text='Tictac'/>\r\n        </Link>\r\n        <Link \r\n          to='/tower'\r\n          component={RouterLink}\r\n        >\r\n          <TextSmallScreen text='To' />\r\n          <TextBigScreen text='Tower'/>\r\n        </Link>\r\n        <Link \r\n          to='/snek'\r\n          component={RouterLink}\r\n        >\r\n          <TextSmallScreen text='S' />\r\n          <TextBigScreen text='Snek'/>\r\n        </Link>\r\n      </Stack>\r\n    </Box>\r\n  )\r\n}\r\n","// some functions relate to the games\r\nexport function getNumGamesLeft () {\r\n  if (!isNumGamesLeftValid()) {\r\n    resetNumGamesLeft();\r\n  }\r\n\r\n  const numGamesLeft = parseInt(localStorage.getItem('numGamesLeft'));\r\n  return numGamesLeft;\r\n}\r\n\r\nexport function resetNumGamesLeft () {\r\n  localStorage.setItem('numGamesLeft', 3);\r\n  localStorage.setItem('finishGame1', 'false');\r\n  localStorage.setItem('finishGame2', 'false');\r\n  localStorage.setItem('finishGame3', 'false');\r\n};\r\n\r\n// decrease the counter, if that game has not been finished before\r\nexport function decreaseNumGamesLeft (idx) {\r\n  if (!isNumGamesLeftValid()) {\r\n    resetNumGamesLeft();\r\n  }\r\n\r\n  // counter\r\n  const key = `finishGame${idx}`;\r\n  const value = localStorage.getItem(key);\r\n\r\n  if (value === 'false') {\r\n    localStorage.setItem(key, 'true');\r\n\r\n    // update the counter\r\n    const numGamesLeft = parseInt(localStorage.getItem('numGamesLeft'));\r\n    localStorage.setItem('numGamesLeft', numGamesLeft - 1);\r\n  }\r\n}\r\n\r\n// check validity of the stored value\r\nexport function isNumGamesLeftValid () {\r\n  const storedValue = localStorage.getItem('numGamesLeft');\r\n  let flag = true;\r\n  \r\n  if (storedValue === null) {\r\n    flag = false;\r\n  }\r\n  else {\r\n    // check if the value is valid\r\n    const numberRegex = /^[1|2|3]$/;\r\n    if (storedValue.match(numberRegex)) {\r\n      const record = parseInt(storedValue);\r\n\r\n      // also check the other storage are also ok.\r\n      // if result = 3, then all finishGame[1|2|3] are false.\r\n      // if result = 2, then one game is true.\r\n      // if result = 1, then two games are true\r\n      // if result = 0, then all games are true.\r\n      const keys = [\r\n        'finishGame1', 'finishGame2', 'finishGame3'\r\n      ];\r\n\r\n      const gameRecords = keys.map((key) => localStorage.getItem(key));\r\n      let countGamesNotFinish = 0;\r\n      let allGameRecordsValid = true;\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        if (gameRecords[i] !== 'false' && gameRecords[i] !== 'true') {\r\n          allGameRecordsValid = false;\r\n          break;\r\n        }\r\n  \r\n        countGamesNotFinish += gameRecords[i] === 'false' ? 1 : 0;\r\n      }\r\n\r\n      if ((!allGameRecordsValid) || record !== countGamesNotFinish) {\r\n        flag = false;\r\n      }\r\n    }\r\n    else {\r\n      flag = false;\r\n    }\r\n  }\r\n\r\n  return flag;\r\n}\r\n","import { Button, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { getNumGamesLeft, resetNumGamesLeft } from '../utils/utils';\r\n\r\nconst styles = {\r\n  box: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  line1: {\r\n    color: 'blue',\r\n    fontFamily: 'Monospace',\r\n    mx: 1,\r\n    mb: 2,\r\n    textAlign: 'center',\r\n  },\r\n  box2: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    mx: 2,\r\n  },\r\n  line2: {\r\n    color: 'blue',\r\n    fontFamily: 'Monospace',\r\n    display: 'inline',\r\n  },\r\n  button: {\r\n    mx: 4,\r\n    my: 2,\r\n    display: 'inline',\r\n  },\r\n};\r\n\r\nexport default function DashBoard() {\r\n  const [numGamesLeft, setNumGamesLeft] = useState(null);\r\n\r\n  // after loading, check with local storage\r\n  useEffect(() => {\r\n    let record = getNumGamesLeft();\r\n\r\n    if (record === 0) {\r\n      alert('Congratulations on finishing all games!');\r\n      resetNumGamesLeft();\r\n      record = 3;\r\n    }\r\n\r\n    setNumGamesLeft(record);\r\n  }, []);\r\n\r\n  // button onclick\r\n  const reset = () => {\r\n    resetNumGamesLeft();\r\n    setNumGamesLeft(3);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={styles.box}\r\n    >\r\n      <Typography\r\n        sx={styles.line1}\r\n        variant='h5'\r\n      >\r\n        Please choose an option from the sidebar.\r\n      </Typography>\r\n      <Box\r\n        sx={styles.box2}\r\n      >\r\n        <Typography\r\n          sx={styles.line2}\r\n          variant='h5'\r\n        >\r\n          {`Games left to win: ${numGamesLeft}`}\r\n        </Typography>\r\n        <Button\r\n          sx={styles.button}\r\n          variant='outlined'\r\n          color='primary'\r\n          size='small'\r\n          onClick={reset}\r\n        >\r\n          reset\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Box } from '@mui/system';\r\nimport { Button } from '@mui/material';\r\n\r\nconst styles = {\r\n  backgroundColor: '#fff',\r\n  border: '1px solid #333',\r\n  height: '150px',\r\n  width: '300px',\r\n  position: 'absolute',\r\n  left: '50%',\r\n  top: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n}\r\n\r\nexport default function DialogWindow({ isOpen, children, buttonText, buttonOnClick }) {\r\n  if (isOpen) {\r\n    return (\r\n      <Box\r\n        sx={styles}\r\n      >\r\n        {children}\r\n        <Button\r\n          sx={{ mt: 2 }}\r\n          variant='contained'\r\n          color='secondary'\r\n          size='small'\r\n          onClick={buttonOnClick}\r\n        >\r\n          {buttonText}\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n  else {\r\n    return <></>\r\n  }\r\n}\r\n","import { Typography } from '@mui/material';\r\nimport { Box } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\nimport DialogWindow from '../components/DialogWindow';\r\nimport { decreaseNumGamesLeft } from '../utils/utils';\r\n\r\nconst styles = {\r\n  box: {\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexWrap: 'nowrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  titleBox: {\r\n    width: '100%',\r\n    mb: 10,\r\n    textAlign: 'center',\r\n  },\r\n  boardWrapper: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  cell: {\r\n    width: '25px',\r\n    height: '25px',\r\n    border: '1px solid #000',\r\n  },\r\n  messageText: {\r\n    fontSize: '14pt',\r\n  },\r\n};\r\n\r\n// the head direction\r\nconst LEFT = 1;\r\nconst RIGHT = 2;\r\nconst TOP = 3;\r\nconst BOTTOM = 4;\r\n\r\n// the board is 10 * 10\r\nconst CELL_NUMBER = 10;\r\n\r\n// game status\r\nconst WIN_LENGTH = 20;\r\nconst WIN = 5;\r\nconst LOSE = 6;\r\nconst UNDERGOING = 7;\r\n\r\n// initial snake location.\r\n// top left corner, and the cell to the right\r\nconst INITIAL_SNAKE = [\r\n  {rowIdx: 0, colIdx: 1},\r\n  {rowIdx: 0, colIdx: 0}, \r\n];\r\n\r\nexport default function Snek() {\r\n  // initially, the snake heads right\r\n  const [headDirection, setHeadDirection] = useState(RIGHT);\r\n\r\n  // initially, it occupy top left and the cell to the right, so its length is 2\r\n  const [snakeCells, setSnakeCells] = useState(INITIAL_SNAKE);\r\n\r\n  // initially, food\r\n  const [foodLocation, setFoodLocation] = useState({});\r\n\r\n  // board\r\n  const [board, setBoard] = useState([]);\r\n\r\n  // game status\r\n  const [gameStatus, setGameStatus] = useState(UNDERGOING);\r\n\r\n  // dialog after win or lose\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  // a timer to increment every 0.5 seconds.\r\n  // and use useEffect to monitor that timer, \r\n  // so the snakeCells update every 0.5 seconds.\r\n  // otherwise, write 'move' inside the useEffect, \r\n  // it only have the very initial version of the snakeCells\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  const getInitialBoard = () => {\r\n    const initialBoard = new Array(CELL_NUMBER).fill([]);\r\n    for (let i = 0; i < CELL_NUMBER; i++) {\r\n      initialBoard[i] = new Array(CELL_NUMBER).fill([]);\r\n    }\r\n\r\n    return initialBoard;\r\n  }\r\n\r\n  // a snake has cell background #999.\r\n  // a food has cell background #252525.\r\n  // if the snake meets the food, then snake style dominates\r\n  const snakeAndFoodStyle = (rowIdx, colIdx) => {\r\n    const result = {\r\n      backgroundColor: 'transparent',\r\n    }\r\n\r\n    // check if the snake in this cell\r\n    let found = false;\r\n    for (let i = 0; i < snakeCells.length; i++) {\r\n      if (snakeCells[i].rowIdx === rowIdx && snakeCells[i].colIdx === colIdx) {\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found) {\r\n      result.backgroundColor = '#999';\r\n    }\r\n    else if (rowIdx === foodLocation.rowIdx && colIdx === foodLocation.colIdx) {\r\n      result.backgroundColor = '#252525';\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // during loading, set the initial board, and initial food location\r\n  useEffect(() => {\r\n    setBoard(getInitialBoard());\r\n    setFoodLocation(getRandomFoodLocation());\r\n\r\n    // the snake moves every 0.5 seconds, so the timer changes every 0.5 seconds.\r\n    const timerInterval = window.setInterval(() => setTimer(timer => timer + 1), 500);\r\n\r\n    // listen to the 4 arrow keys\r\n    window.addEventListener('keydown', changeHeadDirection);\r\n\r\n    // clean up the timer and the keydown listener\r\n    return () => {\r\n      clearInterval(timerInterval);\r\n      window.removeEventListener('keydown', changeHeadDirection);\r\n    } \r\n  }, []);\r\n\r\n  // move the snake based on head direction.\r\n  const move = () => {\r\n    const snakeCellsCopy = [...snakeCells];\r\n    const tailCell = snakeCellsCopy.pop();\r\n    \r\n    // copy the head\r\n    const newHeadCell = {...snakeCellsCopy[0]};\r\n\r\n    if (headDirection === TOP) {\r\n      newHeadCell.rowIdx -= 1;\r\n    }\r\n    else if (headDirection === BOTTOM) {\r\n      newHeadCell.rowIdx += 1;\r\n    }\r\n    else if (headDirection === LEFT) {\r\n      newHeadCell.colIdx -= 1;\r\n    }\r\n    else if (headDirection === RIGHT) {\r\n      newHeadCell.colIdx += 1;\r\n    }\r\n\r\n    // update the snake\r\n    const newSnakeCells = [newHeadCell, ...snakeCellsCopy];\r\n    \r\n    // if the head of the snake meets the food, then show another food\r\n    if (newHeadCell.rowIdx === foodLocation.rowIdx && newHeadCell.colIdx === foodLocation.colIdx) {\r\n      setFoodLocation(getRandomFoodLocation());\r\n\r\n      // also the snake poped cell is put back, since the length of the snake increases\r\n      newSnakeCells.push(tailCell);\r\n    }\r\n\r\n    setSnakeCells(newSnakeCells);\r\n\r\n    // now check the status\r\n    const gameStatus = checkGameStatus(newSnakeCells);\r\n    if (gameStatus !== UNDERGOING) {\r\n      setIsDialogOpen(true);\r\n      setGameStatus(gameStatus);\r\n\r\n      // also remove the listener and click\r\n    }\r\n  } \r\n\r\n  // another useEffect to run when the timer changes\r\n  useEffect(() => {\r\n    if (gameStatus === UNDERGOING) {\r\n      move();\r\n    }\r\n  }, [timer, gameStatus]);\r\n\r\n  // get random food location\r\n  const getRandomFoodLocation = () => {\r\n    // all cells, cancel the position that the snake is in.\r\n    let rowIdx = 0;\r\n    let colIdx = 0;\r\n\r\n    while (true) {\r\n      rowIdx = Math.floor(Math.random() * CELL_NUMBER);\r\n      colIdx = Math.floor(Math.random() * CELL_NUMBER);\r\n\r\n      // check if this is the snake cells\r\n      let found = false;\r\n      for (let i = 0; i < snakeCells.length; i++) {\r\n        if (snakeCells[i].rowIdx === rowIdx && snakeCells[i].colIdx === colIdx) {\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!found) {\r\n        break;\r\n      }\r\n    } \r\n\r\n    return {rowIdx, colIdx};\r\n  };\r\n\r\n  // press 4 keys to change the head direction\r\n  const changeHeadDirection = (e) => {\r\n    if (e.key === 'ArrowUp') {\r\n      setHeadDirection(TOP);\r\n    }\r\n    else if (e.key === 'ArrowDown') {\r\n      setHeadDirection(BOTTOM);\r\n    }\r\n    else if (e.key === 'ArrowLeft') {\r\n      setHeadDirection(LEFT);\r\n    }\r\n    else if (e.key === 'ArrowRight') {\r\n      setHeadDirection(RIGHT);\r\n    }\r\n  };\r\n\r\n  // check if win or lose.\r\n  // win: snake length >= 20.\r\n  // lose: move beyond the board, move to a cell with itself\r\n  const checkGameStatus = (thisSnakeCells) => {\r\n    // input the latest snake cells, prevent the react update delay\r\n    if (thisSnakeCells.length >= WIN_LENGTH) {\r\n      // update the record\r\n      decreaseNumGamesLeft(3);\r\n      return WIN;\r\n    }\r\n\r\n    // only need to check if the head is beyond the board\r\n    const headCell = thisSnakeCells[0];\r\n    const beyond = headCell.rowIdx < 0 \r\n      || headCell.rowIdx >= CELL_NUMBER\r\n      || headCell.colIdx < 0 \r\n      || headCell.colIdx >= CELL_NUMBER\r\n    ;\r\n\r\n    if (beyond) {\r\n      return LOSE;\r\n    }\r\n\r\n    // check if hit itself, simply check if the head is the same with any other cells\r\n    let collide = false;\r\n    \r\n    for (let i = 1; i < thisSnakeCells.length; i++) {\r\n      if (headCell.rowIdx === thisSnakeCells[i].rowIdx && headCell.colIdx === thisSnakeCells[i].colIdx) {\r\n        collide = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (collide) {\r\n      return LOSE;\r\n    }\r\n\r\n    // finally, undergoing\r\n    return UNDERGOING;\r\n  };\r\n\r\n  // reset the game\r\n  const resetGame = () => {\r\n    setIsDialogOpen(false);\r\n    setHeadDirection(RIGHT);\r\n    setSnakeCells(INITIAL_SNAKE);\r\n    setFoodLocation(getRandomFoodLocation());\r\n    setGameStatus(UNDERGOING);\r\n    setTimer(0);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={styles.box}\r\n    >\r\n      <Box\r\n        sx={styles.titleBox}\r\n      >\r\n        <Typography\r\n          variant='h5'\r\n          fontFamily='Monospace'\r\n          color='text.primary'\r\n        >\r\n          Use arrow keys on the keyboard to control.\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        sx={styles.boardWrapper}\r\n      >\r\n        {board.map((row, colIdx) => (\r\n          <Box\r\n            key={`row ${colIdx}`}\r\n          >\r\n            {row.map((cell, rowIdx) => (\r\n              <Box\r\n                key={`cell ${rowIdx} ${colIdx}`}\r\n                sx={{...styles.cell, ...snakeAndFoodStyle(rowIdx, colIdx)}}\r\n              />\r\n            ))}\r\n          </Box>\r\n        ))}\r\n      </Box>\r\n      <DialogWindow\r\n        isOpen={isDialogOpen}\r\n        buttonText='Play again?'\r\n        buttonOnClick={resetGame}\r\n      >\r\n        {gameStatus === WIN\r\n          ? <Typography\r\n              sx={styles.messageText}\r\n            >\r\n              Congratulations!\r\n            </Typography>\r\n          : <Typography\r\n              sx={styles.messageText}\r\n            >\r\n              Oh no!\r\n            </Typography>\r\n        }\r\n      </DialogWindow>\r\n    </Box>\r\n  )\r\n}\r\n\r\n","import { Grid, Typography } from '@mui/material';\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router';\r\nimport DialogWindow from '../components/DialogWindow';\r\nimport { decreaseNumGamesLeft } from '../utils/utils';\r\n\r\n// initial board\r\nconst initialBoard = new Array(9).fill('');\r\n\r\nconst styles = {\r\n  box: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  cell: {\r\n    height: '33%',\r\n    m: 0,\r\n    p: 0,\r\n    fontSize: '4em',\r\n    color: 'black',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  messageText: {\r\n    fontSize: '14pt',\r\n  }\r\n};\r\n\r\n// idx = 0, 1, 2, ... 8\r\nconst cellBorderStyle = (idx) => {\r\n  const borders = {};\r\n  const value = '2px solid #333';\r\n\r\n  if (idx % 3 !== 2) {\r\n    borders.borderRight = value;\r\n  }\r\n\r\n  if (idx <= 5) {\r\n    borders.borderBottom = value;\r\n  }\r\n\r\n  return borders;\r\n};\r\n\r\n// two players have different background color\r\nconst cellBackgroundColor = (isPlayer1, content) => {\r\n  if (content === 'o' || content === 'x') {\r\n    return {\r\n      backgroundColor: 'white',\r\n    }\r\n  }\r\n  else {\r\n    return {\r\n      backgroundColor: isPlayer1 ? 'rgb(255,220,220)' : 'rgb(220,220,255)',\r\n    };\r\n  }\r\n};\r\n\r\n// code for three situations\r\nconst WIN = 1;\r\nconst TIE = 2;\r\nconst UNDERGOING = 3;\r\n\r\nexport default function Tictac() {\r\n  // configure the initial board, and initial player\r\n  const [board, setBoard] = useState(initialBoard);\r\n  const [isPlayer1, setIsPlayer1] = useState(true);\r\n\r\n  // the final dialog when game finishes\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  // game result\r\n  const [winner, setWinner] = useState('');\r\n  const [player1Moves, setPlayer1Moves] = useState(0);\r\n  const [player2Moves, setPlayer2Moves] = useState(0);\r\n\r\n  const play = (idx) => {\r\n    // first check if the cell idx is empty. \r\n    // if it is not empty, then leave it.\r\n    if (board[idx] !== '') {\r\n      alert('Please play a valid move!!');\r\n      return;\r\n    }\r\n\r\n    // increment the moves\r\n    if (isPlayer1) {\r\n      setPlayer1Moves(player1Moves + 1);\r\n    }\r\n    else {\r\n      setPlayer2Moves(player2Moves + 1);\r\n    }\r\n\r\n    const newBoard = [...board];\r\n    newBoard[idx] = isPlayer1 ? 'o' : 'x';\r\n    setBoard(newBoard);\r\n\r\n    // check the game status\r\n    const gameStatus = isComplete(newBoard);\r\n\r\n    if (gameStatus === UNDERGOING) {\r\n      setIsPlayer1(!isPlayer1);\r\n    }\r\n    else {\r\n      // the game is either win, or tie.\r\n      if (gameStatus === WIN) {\r\n        if (isPlayer1) {\r\n          setWinner('Player 1');\r\n          decreaseNumGamesLeft(1);\r\n        }\r\n        else {\r\n          setWinner('Player 2');\r\n        }\r\n      }\r\n\r\n      setIsDialogOpen(true);\r\n    }\r\n  };\r\n\r\n  // the game is complete, when\r\n  // all 9 squares are filled,\r\n  // or when there is 3 of 0 or x in a horizontal / vertical / diagonal row. \r\n  // input the new board, since the useState update may not be ready yet.\r\n  const isComplete = (thisBoard) => {\r\n    // first check if all 9 cells are filled\r\n    let isAllFilled = true;\r\n    for (let i = 0; i < thisBoard.length; i++) {\r\n      if (thisBoard[i] === '') {\r\n        isAllFilled = false;\r\n        break;\r\n      } \r\n    }\r\n\r\n    // now check if a person win\r\n    let isWin = false;\r\n\r\n    // check horiztonal and vertical\r\n    for (let i = 0; i < 3; i++) {\r\n      const checkRow = thisBoard[3 * i] === thisBoard[3 * i + 1] \r\n        && thisBoard[3 * i] === thisBoard[3 * i + 2] \r\n        && thisBoard[3 * i ] !== ''\r\n      ;\r\n\r\n      const checkColumn = thisBoard[i] === thisBoard[i + 3]\r\n        && thisBoard[i] === thisBoard[i + 6]\r\n        && thisBoard[i] !== ''\r\n      ;\r\n\r\n      if (checkRow || checkColumn) {\r\n        isWin = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!isWin) {\r\n      // check diagonal\r\n      const checkDiagonal1 = thisBoard[0] === thisBoard[4]\r\n        && thisBoard[4] === thisBoard[8]\r\n        && thisBoard[0] !== ''\r\n      ;\r\n\r\n      const checkDiagonal2 = thisBoard[2] === thisBoard[4]\r\n        && thisBoard[4] === thisBoard[6]\r\n        && thisBoard[2] !== ''\r\n      ;\r\n\r\n      if (checkDiagonal1 || checkDiagonal2) {\r\n        isWin = true;\r\n      }\r\n    }\r\n\r\n    // determine WIN, TIE, UNDERGOING\r\n    if (isWin) {\r\n      return WIN;\r\n    }\r\n    else if (isAllFilled) {\r\n      return TIE;\r\n    }\r\n    else {\r\n      return UNDERGOING;\r\n    }\r\n  };\r\n\r\n  // when the game finishes, the dialog pops out, \r\n  // close the dialog redirects the user to the home page.\r\n  const navigate = useNavigate();\r\n  const goToHomePage = () => navigate('/', { replace: true });\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      sx={styles.box}\r\n    >\r\n      {board.map((content, idx) => (\r\n        <Grid\r\n          item\r\n          xs={4}\r\n          key={idx}\r\n          sx={{...styles.cell, ...cellBorderStyle(idx), ...cellBackgroundColor(isPlayer1, content)}}\r\n          onClick={() => play(idx)}\r\n        >\r\n          {content}\r\n        </Grid>\r\n      ))}\r\n      <DialogWindow\r\n        isOpen={isDialogOpen}\r\n        buttonText='OK'\r\n        buttonOnClick={goToHomePage}\r\n      >\r\n        <Typography\r\n          sx={styles.messageText}\r\n        >\r\n          {winner === '' ? 'No one wins' : `${winner} wins`}\r\n        </Typography>\r\n        <Typography\r\n          sx={styles.messageText}\r\n        >\r\n          {`A total of ${winner === 'Player 1' || winner === '' ? player1Moves : player2Moves} moves were complete`}\r\n        </Typography>\r\n      </DialogWindow>\r\n    </Grid>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Box } from '@mui/system';\r\nimport { useNavigate } from 'react-router';\r\nimport DialogWindow from '../components/DialogWindow';\r\nimport { Typography, Button } from '@mui/material';\r\nimport { decreaseNumGamesLeft } from '../utils/utils';\r\n\r\nconst styles = {\r\n  container: {\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center',\r\n    alignContent: 'space-around',\r\n  },\r\n  box: {\r\n    width: '30%',\r\n    height: '50%',\r\n    border: '2px dashed #999',\r\n    position: 'relative',\r\n  },\r\n  horizontalLine: {\r\n    height: '7px',\r\n    width: '30%',\r\n    backgroundColor: 'black',\r\n    position: 'absolute',\r\n    left: '50%',\r\n    bottom: '30px',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  verticalLine: {\r\n    width: '7px',\r\n    height: '80px',\r\n    backgroundColor: 'black',\r\n    position: 'absolute',\r\n    left: '50%',\r\n    bottom: '0px',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  block: {\r\n    height: '13px',\r\n    position: 'absolute',\r\n    border: '1px solid black',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  messageText: {\r\n    fontSize: '14pt',\r\n  },\r\n  extraContent: {\r\n    mt: 2,\r\n    mb: 2,\r\n    width: '100%',\r\n    height: 'fit-content',\r\n    textAlign: 'center',\r\n  }\r\n};\r\n\r\n// colors, max number of blocks = 5.\r\n// all blocks have the same height, but different widths\r\nconst colors = ['red', 'orange', 'yellow', 'blue', 'green'];\r\nconst widths = ['30%', '40%', '50%', '60%', '70%'];\r\n\r\nexport default function Snek() {\r\n  // initailly, the board is empty.\r\n  // each array represents a box\r\n  const [board, setBoard] = useState([[], [], []]);\r\n\r\n  // remember the user input\r\n  const [numBlocks, setNumBlocks] = useState(0);\r\n\r\n  // remember the from\r\n  const [blockFrom, setBlockFrom] = useState(null);\r\n\r\n  // dialog window\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  // total moves\r\n  const [totalMoves, setTotalMoves] = useState(0);\r\n\r\n  // one click to move FROM, another click to move TO.\r\n  // every time moves the block at the top.\r\n  // and that block on FROM must be smaller than the block on TO.\r\n  const move = (idx) => {\r\n    if (blockFrom === null) {\r\n      setBlockFrom(idx);\r\n    }\r\n    else {\r\n      // blockFrom has value, now is the blockTo\r\n      const blockTo = idx;\r\n\r\n      // valid move: blockTo !== blockFrom, and blockFrom has block, \r\n      // and the top block of blockFrom is less than empty blockTo, or top block of blockTo\r\n      const check1 = blockTo !== blockFrom;\r\n      const check2 = board[blockFrom].length !== 0;\r\n      const check3 = board[blockTo].length === 0 \r\n        || parseFloat(board[blockFrom][0].width) < parseFloat(board[blockTo][0].width)\r\n      ;\r\n\r\n      if (check1 && check2 && check3) {\r\n        // increase total moves\r\n        setTotalMoves(totalMoves + 1);\r\n\r\n        // move the top block\r\n        const newBoard = [...board];\r\n        const thisBlock = newBoard[blockFrom].shift();\r\n        newBoard[blockTo] = [thisBlock, ...newBoard[blockTo]];\r\n        setBoard(newBoard);\r\n\r\n        // check if win already.\r\n        // also check if the game is completed.\r\n        // the rule has restricted the move, so only check if the array length is enough.\r\n        if (newBoard[2].length === numBlocks) {\r\n          // show dialog, and update record\r\n          setIsDialogOpen(true);\r\n          decreaseNumGamesLeft(2);\r\n        }\r\n      }\r\n\r\n      // now, the move is either invalid, or valid & completed,\r\n      // reset the blockFrom\r\n      setBlockFrom(null);\r\n    }\r\n  }\r\n\r\n  const navigate = useNavigate();\r\n  const goToHomePage = () => navigate('/', { replace: true });\r\n\r\n  // button click to reset the game\r\n  const resetGame = () => {\r\n    setTotalMoves(0);\r\n    setBlockFrom(null);\r\n    setIsDialogOpen(false);\r\n    setBoard(getInitialBoard(numBlocks));\r\n  };\r\n\r\n  // set the 'top' for the block. \r\n  // take account of the total number of blocks in that container\r\n  const blockBottomPosition = (idx, numBlocks) => {\r\n    return {\r\n      bottom: `${32 + (numBlocks - idx - 1) * 12}px`,\r\n    };\r\n  };\r\n\r\n  const blockFromStyle = (blockIdx) => {\r\n    return {\r\n      backgroundColor: blockIdx === blockFrom ? '#8080805c' : 'transparent',\r\n    };\r\n  };\r\n\r\n  // input the board numBlocks, and output the initial board\r\n  const getInitialBoard = (numberBlocks) => {\r\n    // now put the blocks onto the bar\r\n    const blocks = new Array(numberBlocks).fill([]);\r\n    for (let i = 0; i < blocks.length; i++) {\r\n      blocks[i] = {\r\n        backgroundColor: colors[i],\r\n        width: widths[i],\r\n      }\r\n    };\r\n\r\n    const initialBoard = [blocks, [], []];\r\n    return initialBoard;\r\n  }\r\n\r\n  // ask the use number of blocks\r\n  useEffect(() => {\r\n    let inputNumBlocks = 3;\r\n    while (true) {\r\n      const userInput = prompt('Please enter the number of blocks (3, 4, or 5):');\r\n\r\n      if (userInput !== null && userInput !== '') {\r\n        userInput.trim();\r\n        if (userInput === '3' || userInput === '4' || userInput === '5') {\r\n          inputNumBlocks = parseInt(userInput);\r\n          break;\r\n        }\r\n      }\r\n\r\n      alert('Invalid input. Please enter 3, 4, or 5.');\r\n    }\r\n\r\n    // store the number of blocks\r\n    setNumBlocks(inputNumBlocks);\r\n    setBoard(getInitialBoard(inputNumBlocks));\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={styles.container}\r\n    >\r\n      <Box\r\n        sx={styles.extraContent}\r\n      >\r\n        <Typography\r\n          variant='h5'\r\n          fontFamily='Monospace'\r\n          color='text.primary'\r\n        >\r\n          One click to register the box 'From', and another click to register the box 'To'.\r\n        </Typography>\r\n      </Box>\r\n      {board.map((blocks, idx) => (\r\n        <Box\r\n          key={idx}\r\n          sx={{ ...styles.box, ...blockFromStyle(idx) }}\r\n          onClick={() => move(idx)}\r\n        >\r\n          <Box\r\n            sx={styles.horizontalLine}\r\n          />\r\n          <Box\r\n            sx={styles.verticalLine}\r\n          />\r\n          {blocks.map((block, idx2) => (\r\n            <Box\r\n              key={`block ${idx2}`}\r\n              sx={{ ...block, ...styles.block, ...blockBottomPosition(idx2, blocks.length) }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      ))}\r\n      <Box\r\n        sx={styles.extraContent}\r\n      >\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          size='medium'\r\n          onClick={resetGame}\r\n        >\r\n          Reset\r\n        </Button>\r\n      </Box>\r\n      <DialogWindow\r\n        isOpen={isDialogOpen}\r\n        buttonText='OK'\r\n        buttonOnClick={goToHomePage}\r\n      >\r\n        <Typography\r\n          sx={styles.messageText}\r\n        >\r\n          {`Success in ${totalMoves} moves`}\r\n        </Typography>\r\n      </DialogWindow>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\nimport { Route, Routes } from 'react-router'\nimport FooterBar from './components/FooterBar'\nimport MainBody from './components/MainBody'\nimport Sidebar from './components/Sidebar'\nimport DashBoard from './pages/DashBoard'\nimport Snek from './pages/Snek'\nimport Tictac from './pages/Tictac'\nimport Tower from './pages/Tower'\n\nexport default function App() {\n  return (\n    <div>\n      <Sidebar/>\n      <MainBody>\n        <Routes>\n          <Route path='/home' element={<DashBoard/>}/>\n          <Route path='/tictactoe' element={<Tictac/>}/>\n          <Route path='/tower' element={<Tower/>}/>\n          <Route path='/snek' element={<Snek/>}/>\n          \n          {/* default and 404 page */}\n          <Route path='/' element={<DashBoard/>}/>\n          <Route path='*' element={<DashBoard/>}/>\n        </Routes>\n      </MainBody>\n      <FooterBar/>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom'\nimport { createTheme, ThemeProvider, responsiveFontSizes } from '@mui/material/styles';\n\n// change the theme to:\n// md: 800px, lg: 1400px, and others keep the same\nlet theme = createTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 800,\n      lg: 1400,\n      xl: 1536,\n    },\n  },\n});\n\ntheme = responsiveFontSizes(theme);\n\n// the github pages does not support BrowserRouter,\n// use HashRouter instead\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider\n      theme={theme}\n    >\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}