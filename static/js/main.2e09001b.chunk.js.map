{"version":3,"sources":["components/FooterBar.js","components/MainBody.js","images/logo.png","components/Sidebar.js","pages/DashBoard.js","components/DialogWindow.js","pages/Snek.js","pages/Tictac.js","pages/Tower.js","App.js","index.js"],"names":["styles","theme","position","height","bottom","right","backgroundColor","breakpoints","down","width","only","up","FooterBar","useTheme","Box","sx","top","left","MainBody","children","sidebar","display","flexDirection","alignItems","logo","marginTop","marginBottom","xs","sm","md","lg","xl","stackLinks","mt","displaySmall","displayBig","Sidebar","Avatar","variant","src","Logo","alt","Stack","direction","justifyContent","spacing","Link","to","component","RouterLink","Typography","box","line1","color","fontSize","fontFamily","box2","line2","button","ml","DashBoard","useState","numGamesLeft","setNumGamesLeft","useEffect","isSet","localStorage","getItem","value","match","numValue","parseInt","alert","reset","setItem","Button","size","onClick","border","transform","DialogWindow","isOpen","buttonText","buttonOnClick","flexWrap","cell","messageText","CELL_NUMBER","INITIAL_SNAKE","rowIdx","colIdx","Snek","headDirection","setHeadDirection","snakeCells","setSnakeCells","foodLocation","setFoodLocation","board","setBoard","gameStatus","setGameStatus","isDialogOpen","setIsDialogOpen","timer","setTimer","snakeAndFoodStyle","result","found","i","length","initialBoard","Array","fill","getInitialBoard","getRandomFoodLocation","timerInterval","window","setInterval","addEventListener","changeHeadDirection","clearInterval","removeEventListener","snakeCellsCopy","tailCell","pop","newHeadCell","newSnakeCells","push","checkGameStatus","move","Math","floor","random","e","key","thisSnakeCells","headCell","collide","map","row","m","p","cellBorderStyle","idx","borders","borderRight","borderBottom","cellBackgroundColor","isPlayer1","content","Tictac","setIsPlayer1","winner","setWinner","totalMoves","setTotalMoves","isComplete","thisBoard","isAllFilled","isWin","checkRow","checkColumn","checkDiagonal1","checkDiagonal2","navigate","useNavigate","newBoard","console","log","emptySlots","filter","play","replace","container","alignContent","horizontalLine","verticalLine","block","extraContent","mb","textAlign","colors","widths","numBlocks","setNumBlocks","blockFrom","setBlockFrom","blockBottomPosition","numberBlocks","blocks","inputNumBlocks","userInput","prompt","trim","blockIdx","blockTo","check1","check2","check3","parseFloat","thisBlock","shift","idx2","App","path","element","createTheme","values","responsiveFontSizes","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2e09001b.chunk.js","sourcesContent":["import { Box, useTheme } from '@mui/system'\r\nimport React from 'react'\r\n\r\nconst styles = (theme) => ({\r\n  position: 'fixed',\r\n  height: '50px',\r\n  bottom: '0',\r\n  right: '0',\r\n  backgroundColor: '#999',\r\n\r\n  // span the full width, but consider the sidebar width.\r\n  // sidebar has 30px, 60px, and 100px\r\n  [theme.breakpoints.down('md')]: {\r\n    width: 'calc(100% - 30px)',\r\n  },\r\n  [theme.breakpoints.only('md')]: {\r\n    width: 'calc(100% - 60px)',\r\n  },\r\n  [theme.breakpoints.up('lg')]: {\r\n    width: 'calc(100% - 100px)',\r\n  },\r\n});\r\n\r\nexport default function FooterBar() {\r\n  const theme = useTheme();\r\n  \r\n  // the box has no content\r\n  return (\r\n    <Box\r\n      sx={styles(theme)}\r\n    />\r\n  )\r\n}\r\n","import { useTheme } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react';\r\n\r\nconst styles = (theme) => ({\r\n  position: 'fixed',\r\n  top: '0',\r\n\r\n  // height is 100% minus the footer bar height at 50px.\r\n  height: 'calc(100% - 50px)',\r\n\r\n  // width: the sidebar has 30px, 60px and 100px.\r\n  [theme.breakpoints.down('md')]: {\r\n    left: '30px',\r\n    width: 'calc(100% - 30px)',\r\n  },\r\n  [theme.breakpoints.only('md')]: {\r\n    left: '60px',\r\n    width: 'calc(100% - 60px)',\r\n  },\r\n  [theme.breakpoints.up('lg')]: {\r\n    left: '100px',\r\n    width: 'calc(100% - 100px)',\r\n  },\r\n\r\n  // add color to check the position\r\n  // backgroundColor: '#666',\r\n});\r\n\r\nexport default function MainBody({ children }) {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={styles(theme)}\r\n    >\r\n      {children}\r\n    </Box>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.430d4ecb.png\";","import React from 'react'\r\nimport { Box } from '@mui/system';\r\nimport Logo from '../images/logo.png';\r\nimport { Avatar, Link, Stack, Typography } from '@mui/material';\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nconst styles = (theme) => ({\r\n  sidebar: {\r\n    position: 'fixed',\r\n    backgroundColor: '#eee', \r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    width: '100px',\r\n\r\n    // the width changes between 30px, 60px, 100px\r\n    [theme.breakpoints.down('md')]: {\r\n      width: '30px',\r\n    },\r\n    [theme.breakpoints.only('md')]: {\r\n      width: '60px',\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      width: '100px',\r\n    },\r\n  },\r\n  logo: {\r\n    marginTop: '15px',\r\n    marginBottom: '15px',\r\n    height: '50px',\r\n    width: '50px',\r\n\r\n    // logo disappears for under 800px\r\n    display: {\r\n      xs: 'none',\r\n      sm: 'none',\r\n      md: 'block',\r\n      lg: 'block',\r\n      xl: 'block',\r\n    },\r\n  },\r\n  stackLinks: {\r\n    mt: 5,\r\n  },\r\n  // sepaaration of 1400px, the textcontent changes\r\n  displaySmall: {\r\n    // below 800px\r\n    display: {\r\n      xs: 'block',\r\n      sm: 'block',\r\n      md: 'block',\r\n      lg: 'none',\r\n      xl: 'none'\r\n    }\r\n  },\r\n  displayBig: {\r\n    // more than 1400px\r\n    display: {\r\n      xs: 'none',\r\n      sm: 'none',\r\n      md: 'none',\r\n      lg: 'block',\r\n      xl: 'block',\r\n    }\r\n  }\r\n});\r\n\r\nexport default function Sidebar() {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      sx={styles(theme).sidebar}\r\n    >\r\n      <Avatar\r\n        variant='square'\r\n        sx={styles(theme).logo}\r\n        src={Logo}\r\n        alt='logo'\r\n      />\r\n      <Stack\r\n        sx={styles(theme).stackLinks}\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={7}\r\n      >\r\n        {/* each link has three display mode */}\r\n        <Link \r\n          to='/home'\r\n          component={RouterLink}\r\n        >\r\n          <Typography sx={styles(theme).displaySmall}>H</Typography>\r\n          <Typography sx={styles(theme).displayBig}>Home</Typography>\r\n        </Link>\r\n        <Link \r\n          to='/tictactoe'\r\n          component={RouterLink}\r\n        >\r\n          <Typography sx={styles(theme).displaySmall}>Ti</Typography>\r\n          <Typography sx={styles(theme).displayBig}>Tictac</Typography>\r\n        </Link>\r\n        <Link \r\n          to='/tower'\r\n          component={RouterLink}\r\n        >\r\n          <Typography sx={styles(theme).displaySmall}>To</Typography>\r\n          <Typography sx={styles(theme).displayBig}>Tower</Typography>\r\n        </Link>\r\n        <Link \r\n          to='/snek'\r\n          component={RouterLink}\r\n        >\r\n          <Typography sx={styles(theme).displaySmall}>S</Typography>\r\n          <Typography sx={styles(theme).displayBig}>Snek</Typography>\r\n        </Link>\r\n      </Stack>\r\n    </Box>\r\n  )\r\n}\r\n","import { Button, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nconst styles = {\r\n  box: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  line1: {\r\n    color: 'blue',\r\n    fontSize: '2em',\r\n    fontFamily: 'Monospace',\r\n  },\r\n  box2: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  line2: {\r\n    color: 'blue',\r\n    fontSize: '2em',\r\n    display: 'inline',\r\n    fontFamily: 'Monospace',\r\n  },\r\n  button: {\r\n    display: 'inline',\r\n    ml: 5,\r\n  },\r\n};\r\n\r\nexport default function DashBoard() {\r\n  const [numGamesLeft, setNumGamesLeft] = useState(3);\r\n\r\n  // after loading, check with local storage\r\n  useEffect(() => {\r\n    // get from the local storage, check if the number if valid.\r\n    let isSet = false;\r\n\r\n    if (localStorage.getItem('numGamesLeft') !== null) {\r\n      // check the stored value\r\n      const value = localStorage.getItem('numGamesLeft');\r\n      const regex = /^\\d+$/;\r\n\r\n      if (value.match(regex)) {\r\n        const numValue = parseInt(value);\r\n\r\n        // if the value is 0, alert message shows congratulations\r\n        if (numValue <= 0) {\r\n          alert('Congratulations!!!');\r\n          reset();\r\n          isSet = true;\r\n        }\r\n        else if (numValue <= 3) {\r\n          setNumGamesLeft(numValue);\r\n          isSet = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isSet) {\r\n      localStorage.setItem('numGamesLeft', '3');\r\n    }\r\n  }, []);\r\n\r\n  // button onclick\r\n  const reset = () => {\r\n    setNumGamesLeft(3);\r\n    localStorage.setItem('numGamesLeft', '3');\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={styles.box}\r\n    >\r\n      <Typography\r\n        sx={styles.line1}\r\n      >\r\n        Please choose an option from the sidebar.\r\n      </Typography>\r\n      <Box\r\n        sx={styles.box2}\r\n      >\r\n        <Typography\r\n          sx={styles.line2}\r\n        >\r\n          {`Games left to win: ${numGamesLeft}`}\r\n        </Typography>\r\n        <Button\r\n          sx={styles.button}\r\n          variant='outlined'\r\n          color='primary'\r\n          size='small'\r\n          onClick={reset}\r\n        >\r\n          reset\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Box } from '@mui/system';\r\nimport { Button } from '@mui/material';\r\n\r\nconst styles = {\r\n  backgroundColor: '#fff',\r\n  border: '1px solid #333',\r\n  height: '150px',\r\n  width: '300px',\r\n  position: 'absolute',\r\n  left: '50%',\r\n  top: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n}\r\n\r\nexport default function DialogWindow({ isOpen, children, buttonText, buttonOnClick }) {\r\n  if (isOpen) {\r\n    return (\r\n      <Box\r\n        sx={styles}\r\n      >\r\n        {children}\r\n        <Button\r\n          sx={{ mt: 2 }}\r\n          variant='contained'\r\n          color='secondary'\r\n          size='small'\r\n          onClick={buttonOnClick}\r\n        >\r\n          {buttonText}\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n  else {\r\n    return <></>\r\n  }\r\n}\r\n","import { Typography } from '@mui/material';\r\nimport { Box } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\nimport DialogWindow from '../components/DialogWindow';\r\n\r\nconst styles = {\r\n  box: {\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  cell: {\r\n    width: '25px',\r\n    height: '25px',\r\n    border: '1px solid #000',\r\n  },\r\n  messageText: {\r\n    fontSize: '14pt',\r\n  },\r\n};\r\n\r\n// the head direction\r\nconst LEFT = 1;\r\nconst RIGHT = 2;\r\nconst TOP = 3;\r\nconst BOTTOM = 4;\r\n\r\n// the board is 10 * 10\r\nconst CELL_NUMBER = 10;\r\n\r\n// game status\r\nconst WIN = 5;\r\nconst LOSE = 6;\r\nconst UNDERGOING = 7;\r\n\r\n// initial snake location.\r\n// top left corner, and the cell to the right\r\nconst INITIAL_SNAKE = [\r\n  {rowIdx: 0, colIdx: 1},\r\n  {rowIdx: 0, colIdx: 0}, \r\n];\r\n\r\nexport default function Snek() {\r\n  // initially, the snake heads right\r\n  const [headDirection, setHeadDirection] = useState(RIGHT);\r\n\r\n  // initially, it occupy top left and the cell to the right, so its length is 2\r\n  const [snakeCells, setSnakeCells] = useState(INITIAL_SNAKE);\r\n\r\n  // initially, food\r\n  const [foodLocation, setFoodLocation] = useState({});\r\n\r\n  // board\r\n  const [board, setBoard] = useState([]);\r\n\r\n  // game status\r\n  const [gameStatus, setGameStatus] = useState(UNDERGOING);\r\n\r\n  // dialog after win or lose\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  // a timer to increment every 0.5 seconds.\r\n  // and use useEffect to monitor that timer, \r\n  // so the snakeCells update every 0.5 seconds.\r\n  // otherwise, write 'move' inside the useEffect, \r\n  // it only have the very initial version of the snakeCells\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  const getInitialBoard = () => {\r\n    const initialBoard = new Array(CELL_NUMBER).fill([]);\r\n    for (let i = 0; i < CELL_NUMBER; i++) {\r\n      initialBoard[i] = new Array(CELL_NUMBER).fill([]);\r\n    }\r\n\r\n    return initialBoard;\r\n  }\r\n\r\n  // a snake has cell background #999.\r\n  // a food has cell background #252525.\r\n  // if the snake meets the food, then snake style dominates\r\n  const snakeAndFoodStyle = (rowIdx, colIdx) => {\r\n    const result = {\r\n      backgroundColor: 'transparent',\r\n    }\r\n\r\n    // check if the snake in this cell\r\n    let found = false;\r\n    for (let i = 0; i < snakeCells.length; i++) {\r\n      if (snakeCells[i].rowIdx === rowIdx && snakeCells[i].colIdx === colIdx) {\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (found) {\r\n      result.backgroundColor = '#999';\r\n    }\r\n    else if (rowIdx === foodLocation.rowIdx && colIdx === foodLocation.colIdx) {\r\n      result.backgroundColor = '#252525';\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // during loading, set the initial board, and initial food location\r\n  useEffect(() => {\r\n    setBoard(getInitialBoard());\r\n    setFoodLocation(getRandomFoodLocation());\r\n\r\n    // the snake moves every 0.5 seconds, so the timer changes every 0.5 seconds.\r\n    const timerInterval = window.setInterval(() => setTimer(timer => timer + 1), 500);\r\n\r\n    // listen to the 4 arrow keys\r\n    window.addEventListener('keydown', changeHeadDirection);\r\n\r\n    // clean up the timer and the keydown listener\r\n    return () => {\r\n      clearInterval(timerInterval);\r\n      window.removeEventListener('keydown', changeHeadDirection);\r\n    } \r\n  }, []);\r\n\r\n  // move the snake based on head direction.\r\n  const move = () => {\r\n    const snakeCellsCopy = [...snakeCells];\r\n    const tailCell = snakeCellsCopy.pop();\r\n    \r\n    // copy the head\r\n    const newHeadCell = {...snakeCellsCopy[0]};\r\n\r\n    if (headDirection === TOP) {\r\n      newHeadCell.rowIdx -= 1;\r\n    }\r\n    else if (headDirection === BOTTOM) {\r\n      newHeadCell.rowIdx += 1;\r\n    }\r\n    else if (headDirection === LEFT) {\r\n      newHeadCell.colIdx -= 1;\r\n    }\r\n    else if (headDirection === RIGHT) {\r\n      newHeadCell.colIdx += 1;\r\n    }\r\n\r\n    // update the snake\r\n    const newSnakeCells = [newHeadCell, ...snakeCellsCopy];\r\n    \r\n    // if the head of the snake meets the food, then show another food\r\n    if (newHeadCell.rowIdx === foodLocation.rowIdx && newHeadCell.colIdx === foodLocation.colIdx) {\r\n      setFoodLocation(getRandomFoodLocation());\r\n\r\n      // also the snake poped cell is put back, since the length of the snake increases\r\n      newSnakeCells.push(tailCell);\r\n    }\r\n\r\n    setSnakeCells(newSnakeCells);\r\n\r\n    // now check the status\r\n    const gameStatus = checkGameStatus(newSnakeCells);\r\n    if (gameStatus !== UNDERGOING) {\r\n      setIsDialogOpen(true);\r\n      setGameStatus(gameStatus);\r\n\r\n      // also remove the listener and click\r\n    }\r\n  } \r\n\r\n  // another useEffect to run when the timer changes\r\n  useEffect(() => {\r\n    if (gameStatus === UNDERGOING) {\r\n      move();\r\n    }\r\n  }, [timer, gameStatus]);\r\n\r\n  // get random food location\r\n  const getRandomFoodLocation = () => {\r\n    // all cells, cancel the position that the snake is in.\r\n    let rowIdx = 0;\r\n    let colIdx = 0;\r\n\r\n    while (true) {\r\n      rowIdx = Math.floor(Math.random() * CELL_NUMBER);\r\n      colIdx = Math.floor(Math.random() * CELL_NUMBER);\r\n\r\n      // check if this is the snake cells\r\n      let found = false;\r\n      for (let i = 0; i < snakeCells.length; i++) {\r\n        if (snakeCells[i].rowIdx === rowIdx && snakeCells[i].colIdx === colIdx) {\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!found) {\r\n        break;\r\n      }\r\n    } \r\n\r\n    return {rowIdx, colIdx};\r\n  };\r\n\r\n  // press 4 keys to change the head direction\r\n  const changeHeadDirection = (e) => {\r\n    if (e.key === 'ArrowUp') {\r\n      setHeadDirection(TOP);\r\n    }\r\n    else if (e.key === 'ArrowDown') {\r\n      setHeadDirection(BOTTOM);\r\n    }\r\n    else if (e.key === 'ArrowLeft') {\r\n      setHeadDirection(LEFT);\r\n    }\r\n    else if (e.key === 'ArrowRight') {\r\n      setHeadDirection(RIGHT);\r\n    }\r\n  };\r\n\r\n  // check if win or lose.\r\n  // win: snake length >= 20.\r\n  // lose: move beyond the board, move to a cell with itself\r\n  const checkGameStatus = (thisSnakeCells) => {\r\n    // input the latest snake cells, prevent the react update delay\r\n    if (thisSnakeCells.length >= 20) {\r\n      return WIN;\r\n    }\r\n\r\n    // only need to check if the head is beyond the board\r\n    const headCell = thisSnakeCells[0];\r\n    const beyond = headCell.rowIdx < 0 \r\n      || headCell.rowIdx >= CELL_NUMBER\r\n      || headCell.colIdx < 0 \r\n      || headCell.colIdx >= CELL_NUMBER\r\n    ;\r\n\r\n    if (beyond) {\r\n      return LOSE;\r\n    }\r\n\r\n    // check if hit itself, simply check if the head is the same with any other cells\r\n    let collide = false;\r\n    \r\n    for (let i = 1; i < thisSnakeCells.length; i++) {\r\n      if (headCell.rowIdx === thisSnakeCells[i].rowIdx && headCell.colIdx === thisSnakeCells[i].colIdx) {\r\n        collide = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (collide) {\r\n      return LOSE;\r\n    }\r\n\r\n    // finally, undergoing\r\n    return UNDERGOING;\r\n  };\r\n\r\n  // reset the game\r\n  const resetGame = () => {\r\n    setIsDialogOpen(false);\r\n    setHeadDirection(RIGHT);\r\n    setSnakeCells(INITIAL_SNAKE);\r\n    setFoodLocation(getRandomFoodLocation());\r\n    setGameStatus(UNDERGOING);\r\n    setTimer(0);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={styles.box}\r\n    >\r\n      {board.map((row, colIdx) => (\r\n        <Box\r\n          key={`row ${colIdx}`}\r\n        >\r\n          {row.map((cell, rowIdx) => (\r\n            <Box\r\n              key={`cell ${rowIdx} ${colIdx}`}\r\n              sx={{...styles.cell, ...snakeAndFoodStyle(rowIdx, colIdx)}}\r\n            />\r\n          ))}\r\n        </Box>\r\n      ))}\r\n      <DialogWindow\r\n        isOpen={isDialogOpen}\r\n        buttonText='Play again?'\r\n        buttonOnClick={resetGame}\r\n      >\r\n        {gameStatus === WIN\r\n          ? <Typography\r\n              sx={styles.messageText}\r\n            >\r\n              Congratulations!\r\n            </Typography>\r\n          : <Typography\r\n              sx={styles.messageText}\r\n            >\r\n              Oh no!\r\n            </Typography>\r\n        }\r\n      </DialogWindow>\r\n    </Box>\r\n  )\r\n}\r\n\r\n","import { Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router';\r\nimport DialogWindow from '../components/DialogWindow';\r\n\r\n// initial board\r\nconst initialBoard = new Array(9).fill('');\r\n\r\nconst styles = {\r\n  box: {\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  cell: {\r\n    width: '33%',\r\n    height: '33%',\r\n    m: 0,\r\n    p: 0,\r\n    fontSize: '2em',\r\n    color: 'black',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  messageText: {\r\n    fontSize: '14pt',\r\n  }\r\n};\r\n\r\n// idx = 0, 1, 2, ... 8\r\nconst cellBorderStyle = (idx) => {\r\n  const borders = {};\r\n  const value = '2px solid #333';\r\n\r\n  if (idx % 3 !== 2) {\r\n    borders.borderRight = value;\r\n  }\r\n\r\n  if (idx <= 5) {\r\n    borders.borderBottom = value;\r\n  }\r\n\r\n  return borders;\r\n};\r\n\r\n// two players have different background color\r\nconst cellBackgroundColor = (isPlayer1, content) => {\r\n  if (content === 'o' || content === 'x') {\r\n    return {\r\n      backgroundColor: 'white',\r\n    }\r\n  }\r\n  else {\r\n    return {\r\n      backgroundColor: isPlayer1 ? 'rgb(255,220,220)' : 'rgb(220,220,255)',\r\n    };\r\n  }\r\n};\r\n\r\n// code for three situations\r\nconst WIN = 1;\r\nconst TIE = 2;\r\nconst UNDERGOING = 3;\r\n\r\nexport default function Tictac() {\r\n  // configure the initial board, and initial player\r\n  const [board, setBoard] = useState(initialBoard);\r\n  const [isPlayer1, setIsPlayer1] = useState(true);\r\n\r\n  // the final dialog when game finishes\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  // game result\r\n  const [winner, setWinner] = useState('');\r\n  const [totalMoves, setTotalMoves] = useState(0);\r\n\r\n  const play = (idx) => {\r\n    // first check if the cell idx is empty. \r\n    // if it is not empty, then leave it.\r\n    if (board[idx] !== '') {\r\n      alert('Please play a valid move!!');\r\n      return;\r\n    }\r\n\r\n    const newBoard = [...board];\r\n    newBoard[idx] = isPlayer1 ? 'o' : 'x';\r\n    setBoard(newBoard);\r\n\r\n    // check the game status\r\n    const gameStatus = isComplete(newBoard);\r\n    console.log(`game status = ${gameStatus}`);\r\n\r\n    if (gameStatus === UNDERGOING) {\r\n      setIsPlayer1(!isPlayer1);\r\n    }\r\n    else {\r\n      // the game is either win, or tie.\r\n      if (gameStatus === WIN) {\r\n        if (isPlayer1) {\r\n          setWinner('Player 1');\r\n          \r\n          // the game is considered won if player1 wins the game\r\n          // get the value from localstorage\r\n          const numGamesLeft = localStorage.getItem('numGamesLeft');\r\n          const regex = /^\\d+$/;\r\n\r\n          if (numGamesLeft !== null && numGamesLeft.match(regex)) {\r\n            const value = parseInt(numGamesLeft);\r\n            localStorage.setItem('numGamesLeft', `${value - 1}`);\r\n          }\r\n          else {\r\n            localStorage.setItem('numGamesLeft', 2);\r\n          }\r\n        }\r\n        else {\r\n          setWinner('Player 2');\r\n        }\r\n      }\r\n\r\n      // count total moves\r\n      const emptySlots = newBoard.filter((content) => content === '');\r\n      if (emptySlots.length % 2 === 0) {\r\n        setTotalMoves(emptySlots.length / 2 + 1);\r\n      }\r\n      else {\r\n        setTotalMoves(((emptySlots.length - 1) / 2 + 1) + 1);\r\n      }\r\n\r\n      setIsDialogOpen(true);\r\n    }\r\n  };\r\n\r\n  // the game is complete, when\r\n  // all 9 squares are filled,\r\n  // or when there is 3 of 0 or x in a horizontal / vertical / diagonal row. \r\n  // input the new board, since the useState update may not be ready yet.\r\n  const isComplete = (thisBoard) => {\r\n    // first check if all 9 cells are filled\r\n    let isAllFilled = true;\r\n    for (let i = 0; i < thisBoard.length; i++) {\r\n      if (thisBoard[i] === '') {\r\n        isAllFilled = false;\r\n        break;\r\n      } \r\n    }\r\n\r\n    // now check if a person win\r\n    let isWin = false;\r\n\r\n    // check horiztonal and vertical\r\n    for (let i = 0; i < 3; i++) {\r\n      const checkRow = thisBoard[3 * i] === thisBoard[3 * i + 1] \r\n        && thisBoard[3 * i] === thisBoard[3 * i + 2] \r\n        && thisBoard[3 * i ] !== ''\r\n      ;\r\n\r\n      const checkColumn = thisBoard[i] === thisBoard[i + 3]\r\n        && thisBoard[i] === thisBoard[i + 6]\r\n        && thisBoard[i] !== ''\r\n      ;\r\n\r\n      if (checkRow || checkColumn) {\r\n        isWin = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!isWin) {\r\n      // check diagonal\r\n      const checkDiagonal1 = thisBoard[0] === thisBoard[4]\r\n        && thisBoard[4] === thisBoard[8]\r\n        && thisBoard[0] !== ''\r\n      ;\r\n\r\n      const checkDiagonal2 = thisBoard[2] === thisBoard[4]\r\n        && thisBoard[4] === thisBoard[6]\r\n        && thisBoard[2] !== ''\r\n      ;\r\n\r\n      if (checkDiagonal1 || checkDiagonal2) {\r\n        isWin = true;\r\n      }\r\n    }\r\n\r\n    // determine WIN, TIE, UNDERGOING\r\n    if (isWin) {\r\n      return WIN;\r\n    }\r\n    else if (isAllFilled) {\r\n      return TIE;\r\n    }\r\n    else {\r\n      return UNDERGOING;\r\n    }\r\n  };\r\n\r\n  // when the game finishes, the dialog pops out, \r\n  // close the dialog redirects the user to the home page.\r\n  const navigate = useNavigate();\r\n  const goToHomePage = () => navigate('/', { replace: true });\r\n\r\n  return (\r\n    <Box\r\n      sx={styles.box}\r\n    >\r\n      {board.map((content, idx) => (\r\n        <Box\r\n          key={idx}\r\n          sx={{...styles.cell, ...cellBorderStyle(idx), ...cellBackgroundColor(isPlayer1, content)}}\r\n          onClick={() => play(idx)}\r\n        >\r\n          {content}\r\n        </Box>\r\n      ))}\r\n      <DialogWindow\r\n        isOpen={isDialogOpen}\r\n        buttonText='OK'\r\n        buttonOnClick={goToHomePage}\r\n      >\r\n        <Typography\r\n          sx={styles.messageText}\r\n        >\r\n          {winner === '' ? 'No one wins' : `${winner} wins`}\r\n        </Typography>\r\n        <Typography\r\n          sx={styles.messageText}\r\n        >\r\n          {`A total of ${totalMoves} were complete`}\r\n        </Typography>\r\n      </DialogWindow>\r\n    </Box>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Box } from '@mui/system';\r\nimport { useNavigate } from 'react-router';\r\nimport DialogWindow from '../components/DialogWindow';\r\nimport { Typography, Button } from '@mui/material';\r\n\r\nconst styles = {\r\n  container: {\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center',\r\n    alignContent: 'space-around',\r\n  },\r\n  box: {\r\n    width: '30%',\r\n    height: '50%',\r\n    border: '2px dashed #999',\r\n    position: 'relative',\r\n  },\r\n  horizontalLine: {\r\n    height: '7px',\r\n    width: '30%',\r\n    backgroundColor: 'black',\r\n    position: 'absolute',\r\n    left: '50%',\r\n    bottom: '30px',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  verticalLine: {\r\n    width: '7px',\r\n    height: '80px',\r\n    backgroundColor: 'black',\r\n    position: 'absolute',\r\n    left: '50%',\r\n    bottom: '0px',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  block: {\r\n    height: '13px',\r\n    position: 'absolute',\r\n    border: '1px solid black',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  messageText: {\r\n    fontSize: '14pt',\r\n  },\r\n  extraContent: {\r\n    mt: 2,\r\n    mb: 2,\r\n    width: '100%',\r\n    height: 'fit-content',\r\n    textAlign: 'center',\r\n  }\r\n};\r\n\r\n// colors, max number of blocks = 5.\r\n// all blocks have the same height, but different widths\r\nconst colors = ['red', 'orange', 'yellow', 'blue', 'green'];\r\nconst widths = ['30%', '40%', '50%', '60%', '70%'];\r\n\r\nexport default function Snek() {\r\n  // initailly, the board is empty.\r\n  // each array represents a box\r\n  const [board, setBoard] = useState([[], [], []]);\r\n\r\n  // remember the user input\r\n  const [numBlocks, setNumBlocks] = useState(0);\r\n\r\n  // remember the from\r\n  const [blockFrom, setBlockFrom] = useState(null);\r\n\r\n  // dialog window\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  // total moves\r\n  const [totalMoves, setTotalMoves] = useState(0);\r\n\r\n  // one click to move FROM, another click to move TO.\r\n  // every time moves the block at the top.\r\n  // and that block on FROM must be smaller than the block on TO.\r\n  const move = (idx) => {\r\n    if (blockFrom === null) {\r\n      setBlockFrom(idx);\r\n    }\r\n    else {\r\n      // blockFrom has value, now is the blockTo\r\n      const blockTo = idx;\r\n\r\n      // valid move: blockTo !== blockFrom, and blockFrom has block, \r\n      // and the top block of blockFrom is less than empty blockTo, or top block of blockTo\r\n      const check1 = blockTo !== blockFrom;\r\n      const check2 = board[blockFrom].length !== 0;\r\n      const check3 = board[blockTo].length === 0 \r\n        || parseFloat(board[blockFrom][0].width) < parseFloat(board[blockTo][0].width)\r\n      ;\r\n\r\n      if (check1 && check2 && check3) {\r\n        // increase total moves\r\n        setTotalMoves(totalMoves + 1);\r\n\r\n        // move the top block\r\n        const newBoard = [...board];\r\n        const thisBlock = newBoard[blockFrom].shift();\r\n        newBoard[blockTo] = [thisBlock, ...newBoard[blockTo]];\r\n        setBoard(newBoard);\r\n\r\n        // check if win already.\r\n        // also check if the game is completed.\r\n        // the rule has restricted the move, so only check if the array length is enough.\r\n        if (newBoard[2].length === numBlocks) {\r\n          setIsDialogOpen(true);\r\n          \r\n          // update the localStorage\r\n          const numGamesLeft = parseInt(localStorage.getItem('numGamesLeft'));\r\n          localStorage.setItem('numGamesLeft', numGamesLeft - 1);\r\n        }\r\n      }\r\n\r\n      // now, the move is either invalid, or valid & completed,\r\n      // reset the blockFrom\r\n      setBlockFrom(null);\r\n    }\r\n  }\r\n\r\n  const navigate = useNavigate();\r\n  const goToHomePage = () => navigate('/', { replace: true });\r\n\r\n  // button click to reset the game\r\n  const resetGame = () => {\r\n    setTotalMoves(0);\r\n    setBlockFrom(null);\r\n    setIsDialogOpen(false);\r\n    setBoard(getInitialBoard(numBlocks));\r\n  };\r\n\r\n  // set the 'top' for the block. \r\n  // take account of the total number of blocks in that container\r\n  const blockBottomPosition = (idx, numBlocks) => {\r\n    return {\r\n      bottom: `${32 + (numBlocks - idx - 1) * 12}px`,\r\n    };\r\n  };\r\n\r\n  const blockFromStyle = (blockIdx) => {\r\n    return {\r\n      backgroundColor: blockIdx === blockFrom ? '#8080805c' : 'transparent',\r\n    };\r\n  };\r\n\r\n  // input the board numBlocks, and output the initial board\r\n  const getInitialBoard = (numberBlocks) => {\r\n    // now put the blocks onto the bar\r\n    const blocks = new Array(numberBlocks).fill([]);\r\n    for (let i = 0; i < blocks.length; i++) {\r\n      blocks[i] = {\r\n        backgroundColor: colors[i],\r\n        width: widths[i],\r\n      }\r\n    };\r\n\r\n    const initialBoard = [blocks, [], []];\r\n    return initialBoard;\r\n  }\r\n\r\n  // ask the use number of blocks\r\n  useEffect(() => {\r\n    let inputNumBlocks = 3;\r\n    while (true) {\r\n      const userInput = prompt('Please enter the number of blocks (3, 4, or 5):');\r\n\r\n      if (userInput !== null && userInput !== '') {\r\n        userInput.trim();\r\n        if (userInput === '3' || userInput === '4' || userInput === '5') {\r\n          inputNumBlocks = parseInt(userInput);\r\n          break;\r\n        }\r\n      }\r\n\r\n      alert('Invalid input. Please enter 3, 4, or 5.');\r\n    }\r\n\r\n    // store the number of blocks\r\n    setNumBlocks(inputNumBlocks);\r\n    setBoard(getInitialBoard(inputNumBlocks));\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={styles.container}\r\n    >\r\n      <Box\r\n        sx={styles.extraContent}\r\n      >\r\n        <Typography\r\n          variant='h5'\r\n          fontFamily='Monospace'\r\n          color='text.primary'\r\n        >\r\n          One click to register the box 'From', and another click to register the box 'To'.\r\n        </Typography>\r\n      </Box>\r\n      {board.map((blocks, idx) => (\r\n        <Box\r\n          key={idx}\r\n          sx={{ ...styles.box, ...blockFromStyle(idx) }}\r\n          onClick={() => move(idx)}\r\n        >\r\n          <Box\r\n            sx={styles.horizontalLine}\r\n          />\r\n          <Box\r\n            sx={styles.verticalLine}\r\n          />\r\n          {blocks.map((block, idx2) => (\r\n            <Box\r\n              key={`block ${idx2}`}\r\n              sx={{ ...block, ...styles.block, ...blockBottomPosition(idx2, blocks.length) }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      ))}\r\n      <Box\r\n        sx={styles.extraContent}\r\n      >\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          size='medium'\r\n          onClick={resetGame}\r\n        >\r\n          Reset\r\n        </Button>\r\n      </Box>\r\n      <DialogWindow\r\n        isOpen={isDialogOpen}\r\n        buttonText='OK'\r\n        buttonOnClick={goToHomePage}\r\n      >\r\n        <Typography\r\n          sx={styles.messageText}\r\n        >\r\n          {`Success in ${totalMoves} moves`}\r\n        </Typography>\r\n      </DialogWindow>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\nimport { Route, Routes } from 'react-router'\nimport FooterBar from './components/FooterBar'\nimport MainBody from './components/MainBody'\nimport Sidebar from './components/Sidebar'\nimport DashBoard from './pages/DashBoard'\nimport Snek from './pages/Snek'\nimport Tictac from './pages/Tictac'\nimport Tower from './pages/Tower'\n\nexport default function App() {\n  return (\n    <div>\n      <Sidebar/>\n      <MainBody>\n        <Routes>\n          <Route path='/home' element={<DashBoard/>}/>\n          <Route path='/tictactoe' element={<Tictac/>}/>\n          <Route path='/tower' element={<Tower/>}/>\n          <Route path='snek' element={<Snek/>}/>\n          \n          {/* default and 404 page */}\n          <Route path='/' element={<DashBoard/>}/>\n          <Route path='*' element={<DashBoard/>}/>\n        </Routes>\n      </MainBody>\n      <FooterBar/>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport { createTheme, ThemeProvider, responsiveFontSizes } from '@mui/material/styles';\n\n// change the theme to:\n// md: 800px, lg: 1400px, and others keep the same\nlet theme = createTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 800,\n      lg: 1400,\n      xl: 1536,\n    },\n  },\n});\n\ntheme = responsiveFontSizes(theme);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider\n      theme={theme}\n    >\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}